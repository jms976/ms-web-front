{"version":3,"sources":["features/commonSlice/commonSlice.ts","app/hooks.ts","features/member/memberAPI.ts","features/member/memberSlice.ts","features/bot/botAPI.ts","features/bot/botSlice.ts","features/scenario/scenarioAPI.ts","features/scenario/scenarioSlice.ts","features/block/blockAPI.ts","features/block/blockSlice.ts","hooks/useUserFatch.ts","components/common/PrivateRoute/index.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","modules/Http/index.tsx"],"names":["commonSlice","createSlice","name","initialState","leftMenuSize","menuStyle","isAuth","authUser","reducers","leftMenuSizeChange","state","action","payload","menuStyleChange","setIsAuth","setAuthUser","actions","selectCommon","common","useAppDispatch","useDispatch","useAppSelector","useSelector","AllMember","a","Http","get","process","headers","noauth","result","data","status","Promise","reject","getMember","memberId","MemberStateUpdate","put","MemberLicenseUpdate","MemberConfigUpdate","getOneMembersAsync","createAsyncThunk","response","getMembersAsync","memberStateUpdate","memberLicenceUpdateAsync","memberConfigUpdate","config","memberSlice","active","lists","licenseUadate","map","item","_id","extraReducers","builder","addCase","fulfilled","selectUsers","member","AllBotTemplate","getBotTemplateAsync","botTemplateSlice","selectBotTemplate","botTemplate","AllScenarioTemplate","getScenarioTemplateAsync","scenarioTemplateSlice","selectScenarioTemplate","scenarioTemplate","AllBlockTemplate","getBlockTemplateAsync","blockTemplateSlice","selectBlockTemplate","blockTemplate","dispatch","userFatch","catch","err","console","log","PrivateRoute","Component","component","rest","useUserFatch","render","props","to","pathname","from","location","Main","lazy","Customer","BotTemplate","ScenarioTemplate","BlockTemplate","Notice","QnA","FAQ","LoginSuccess","LoginFail","App","fallback","exact","path","fetchCount","amount","resolve","setTimeout","incrementAsync","counterSlice","value","increment","decrement","incrementByAmount","pending","store","configureStore","reducer","counter","counterReducer","memberReducer","botTemplateReducer","scenarioTemplateReducer","blockTemplateReducer","commonReducer","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message","axios","interceptors","request","use","withCredentials","href","reponse"],"mappings":"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","file":"static/js/main.edc84a29.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"app/store\";\n\nexport interface commonProps {\n  leftMenuSize: number;\n  menuStyle: { itemId: string; subOpen?: boolean }[];\n  isAuth: boolean;\n  authUser: any | null;\n}\nconst initialState: commonProps = {\n  leftMenuSize: 150,\n  menuStyle: [],\n  isAuth: false,\n  authUser: null,\n};\nexport const commonSlice = createSlice({\n  name: \"common\",\n  initialState,\n  reducers: {\n    leftMenuSizeChange: (state, action: PayloadAction<number>) => {\n      state.leftMenuSize = action.payload;\n    },\n    menuStyleChange: (state, action) => {\n      state.menuStyle = action.payload;\n    },\n    setIsAuth: (state, action) => {\n      state.isAuth = action.payload;\n    },\n    setAuthUser: (state, action) => {\n      state.authUser = action.payload;\n    },\n  },\n});\n\nexport const { leftMenuSizeChange, menuStyleChange, setIsAuth, setAuthUser } =\n  commonSlice.actions;\n\nexport const selectCommon = (state: RootState) => state.common;\n\nexport default commonSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import Http from \"modules/Http\";\n\nexport const AllMember = async () => {\n  try {\n    const result = await Http.get(`${process.env.REACT_APP_API_PATH}/member`, {\n      headers: { noauth: \"use\" },\n    });\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport const getMember = async (memberId: string) => {\n  try {\n    const result = await Http.get(\n      `${process.env.REACT_APP_API_PATH}/member/${memberId}`\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport const MemberStateUpdate = async (memberId: string, state: string) => {\n  try {\n    const result = await Http.put(\n      `${process.env.REACT_APP_API_PATH}/member/${memberId}/state?state=${state}`\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport const MemberLicenseUpdate = async (memberId: string, state: string) => {\n  try {\n    const result = await Http.put(\n      `${process.env.REACT_APP_API_PATH}/member/${memberId}/license?license=${state}`\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport const MemberConfigUpdate = async (memberId: string, state: string) => {\n  try {\n    const result = await Http.put(\n      `${process.env.REACT_APP_API_PATH}/member/${memberId}/config`,\n      state\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"app/store\";\n\nimport {\n  AllMember,\n  getMember,\n  MemberStateUpdate,\n  MemberLicenseUpdate,\n  MemberConfigUpdate,\n} from \"./memberAPI\";\n\nimport { memberProps } from \"constants/Types\";\n\nexport interface MemberState {\n  active: any;\n  lists: memberProps[];\n}\n\nconst initialState: MemberState = {\n  active: {},\n  lists: [],\n};\n\nexport const getOneMembersAsync = createAsyncThunk(\n  \"members/oneMember\",\n  async (memberId: string | null) => {\n    const response = memberId ? await getMember(memberId) : {};\n    return response;\n  }\n);\n\nexport const getMembersAsync = createAsyncThunk(\n  \"members/allMember\",\n  async () => {\n    const response = await AllMember();\n    return response;\n  }\n);\n\nexport const memberStateUpdate = createAsyncThunk(\n  \"members/stateUpeate\",\n  async (data: any) => {\n    const response = await MemberStateUpdate(data.memberId, data.state);\n    return response;\n  }\n);\nexport const memberLicenceUpdateAsync = createAsyncThunk(\n  \"members/licenceUpeate\",\n  async (data: any) => {\n    const response = await MemberLicenseUpdate(data.memberId, data.state);\n    return response;\n  }\n);\nexport const memberConfigUpdate = createAsyncThunk(\n  \"members/configUpeate\",\n  async (data: any) => {\n    const response = await MemberConfigUpdate(data.memberId, data.config);\n    return await response;\n  }\n);\n\nexport const memberSlice = createSlice({\n  name: \"member\",\n  initialState,\n  reducers: {\n    /** 일반 리듀서로 API example */\n    licenseUadate: (state, action: PayloadAction<memberProps>) => {\n      state.active = action.payload;\n      state.lists = state.lists.map((item: any) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        } else {\n          return item;\n        }\n      });\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      getMembersAsync.fulfilled,\n      (state, action: PayloadAction<memberProps[]>) => {\n        state.lists = action.payload;\n      }\n    );\n    builder.addCase(\n      getOneMembersAsync.fulfilled,\n      (state, action: PayloadAction<memberProps>) => {\n        state.active = action.payload;\n      }\n    );\n    builder.addCase(\n      memberStateUpdate.fulfilled,\n      (state, action: PayloadAction<memberProps>) => {\n        if (state.active?._id && state.active?._id === action.payload._id) {\n          state.active = action.payload;\n        }\n        state.lists = state.lists.map((item: any) => {\n          if (item._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return item;\n          }\n        });\n      }\n    );\n    builder.addCase(\n      memberLicenceUpdateAsync.fulfilled,\n      (state, action: PayloadAction<memberProps>) => {\n        if (state.active?._id && state.active?._id === action.payload._id) {\n          state.active = action.payload;\n        }\n        state.lists = state.lists.map((item: any) => {\n          if (item._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return item;\n          }\n        });\n      }\n    );\n    builder.addCase(\n      memberConfigUpdate.fulfilled,\n      (state, action: PayloadAction<memberProps>) => {\n        state.active = action.payload;\n        state.lists = state.lists.map((item: any) => {\n          if (item._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return item;\n          }\n        });\n      }\n    );\n  },\n});\n\nexport const selectUsers = (state: RootState) => state.member;\n\n/** 일반 리듀서로 API example */\nexport const { licenseUadate } = memberSlice.actions;\nexport const memberLicenceUpdate =\n  (data: any): AppThunk =>\n  async (dispatch) => {\n    const response = await MemberLicenseUpdate(data.memberId, data.state);\n    dispatch(licenseUadate(response));\n  };\n\nexport default memberSlice.reducer;\n","import Http from \"modules/Http\";\n\nexport const AllBotTemplate = async () => {\n  try {\n    const result = await Http.get(\n      `${process.env.REACT_APP_API_PATH}/template/templates`\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"app/store\";\n\nimport { AllBotTemplate } from \"./botAPI\";\n\nimport { botTemplateProps } from \"constants/Types\";\n\nexport interface BotTemplateState {\n  lists: botTemplateProps[];\n}\n\nconst initialState: BotTemplateState = {\n  lists: [],\n};\n\nexport const getBotTemplateAsync = createAsyncThunk(\n  \"botTemplate/allBotTemplate\",\n  async () => {\n    const response = await AllBotTemplate();\n    return response;\n  }\n);\n\nexport const botTemplateSlice = createSlice({\n  name: \"botTemplate\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(\n      getBotTemplateAsync.fulfilled,\n      (state, action: PayloadAction<botTemplateProps[]>) => {\n        state.lists = action.payload;\n      }\n    );\n    // builder.addCase(getBotTemplateAsync.fulfilled, (state, action) => {\n    //   state.lists = state.lists.map((item: any) => {\n    //     if (item._id === action.payload._id) {\n    //       return action.payload;\n    //     } else {\n    //       return item;\n    //     }\n    //   });\n    // });\n  },\n});\n\nexport const selectBotTemplate = (state: RootState) => state.botTemplate.lists;\nexport default botTemplateSlice.reducer;\n","import Http from \"modules/Http\";\n\nexport const AllScenarioTemplate = async () => {\n  try {\n    const result = await Http.get(\n      `${process.env.REACT_APP_API_PATH}/scenario/templates`\n    );\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"app/store\";\n\nimport { AllScenarioTemplate } from \"./scenarioAPI\";\n\nimport { scenarioTemplateProps } from \"constants/Types\";\n\nexport interface ScenarioTemplateState {\n  lists: scenarioTemplateProps[];\n}\n\nconst initialState: ScenarioTemplateState = {\n  lists: [],\n};\n\nexport const getScenarioTemplateAsync = createAsyncThunk(\n  \"scenarioTemplate/allScenarioTemplate\",\n  async () => {\n    const response = await AllScenarioTemplate();\n    return response;\n  }\n);\n\nexport const scenarioTemplateSlice = createSlice({\n  name: \"scenarioTemplate\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(\n      getScenarioTemplateAsync.fulfilled,\n      (state, action: PayloadAction<scenarioTemplateProps[]>) => {\n        state.lists = action.payload;\n      }\n    );\n  },\n});\n\nexport const selectScenarioTemplate = (state: RootState) =>\n  state.scenarioTemplate.lists;\nexport default scenarioTemplateSlice.reducer;\n","import Http from \"modules/Http\";\n\nexport const AllBlockTemplate = async () => {\n  try {\n    const result = await Http.get(`${process.env.REACT_APP_API_PATH}/library`);\n    if (result.data.status !== \"success\") return Promise.reject(result);\n    return result.data.data;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"app/store\";\n\nimport { AllBlockTemplate } from \"./blockAPI\";\n\nimport { blockTemplateProps, blockItemProps } from \"constants/Types\";\n\nexport interface BlockTemplateState {\n  lists: blockTemplateProps[];\n}\n\nconst initialState: BlockTemplateState = {\n  lists: [],\n};\n\nexport const getBlockTemplateAsync = createAsyncThunk(\n  \"blockTemplate/allBlockTemplate\",\n  async () => {\n    const response = await AllBlockTemplate();\n    return response;\n  }\n);\n\nexport const blockTemplateSlice = createSlice({\n  name: \"blockTemplate\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(\n      getBlockTemplateAsync.fulfilled,\n      (state, action: PayloadAction<any>) => {\n        state.lists = action.payload;\n      }\n    );\n  },\n});\n\nexport const selectBlockTemplate = (state: RootState) =>\n  state.blockTemplate.lists;\nexport default blockTemplateSlice.reducer;\n","import Http from \"modules/Http\";\n\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport {\n  setIsAuth,\n  setAuthUser,\n  selectCommon,\n} from \"features/commonSlice/commonSlice\";\n\nexport default async function useUserFatch() {\n  const isAuth = useAppSelector(selectCommon).authUser;\n  const dispatch = useAppDispatch();\n  const userFatch = async () => {\n    if (isAuth) return true;\n    const response = await Http.get(\n      `${process.env.REACT_APP_API_HOST}/auth/user`\n    ).catch((err) => {\n      console.log(\"Not properly authenticated\");\n      dispatch(setIsAuth(false));\n      dispatch(setAuthUser(null));\n    });\n\n    if (response && response.data) {\n      dispatch(setIsAuth(true));\n      if (response.data.status === \"success\") {\n        dispatch(setAuthUser(response.data.data));\n      }\n      return true;\n    }\n    return false;\n  };\n  return await userFatch();\n}\n","import React from \"react\";\n// import Http from \"modules/Http\";\n\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport useUserFatch from \"hooks/useUserFatch\";\ninterface PrivateRouteProps {\n  component: any;\n  exact: any;\n  path: string;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({\n  component: Component,\n  ...rest\n}) => {\n  const isAuth = useUserFatch();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuth ? (\n          <Component {...rest} {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/login/fail\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { Suspense, lazy } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  BrowserRouter,\n} from \"react-router-dom\";\nimport PrivateRoute from \"components/common/PrivateRoute\";\n\nimport \"./App.css\";\n\nconst Main = lazy(() => import(\"./pages/Main\"));\nconst Customer = lazy(() => import(\"./pages/Customer\"));\nconst BotTemplate = lazy(() => import(\"./pages/BotTemplate\"));\nconst ScenarioTemplate = lazy(() => import(\"./pages/ScenarioTemplate\"));\nconst BlockTemplate = lazy(() => import(\"./pages/BlockTemplaate\"));\nconst Notice = lazy(() => import(\"./pages/Notice\"));\nconst QnA = lazy(() => import(\"./pages/QnA\"));\nconst FAQ = lazy(() => import(\"./pages/FAQ\"));\nconst LoginSuccess = lazy(() => import(\"./pages/Login/Success\"));\nconst LoginFail = lazy(() => import(\"./pages/Login/Fail\"));\n\nconst App = () => {\n  return (\n    <>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BrowserRouter>\n          <Switch>\n            <PrivateRoute exact path={\"/\"} component={Main} />\n            <PrivateRoute exact path={\"/main\"} component={Main} />\n            <PrivateRoute exact path={\"/customer\"} component={Customer} />\n\n            <PrivateRoute exact path={\"/plugin/bot\"} component={BotTemplate} />\n            <PrivateRoute\n              exact\n              path={\"/plugin/scenario\"}\n              component={ScenarioTemplate}\n            />\n            <PrivateRoute\n              exact\n              path={\"/plugin/block\"}\n              component={BlockTemplate}\n            />\n            <PrivateRoute exact path={\"/manage/notice\"} component={Notice} />\n            <PrivateRoute exact path={\"/manage/qna\"} component={QnA} />\n            <PrivateRoute exact path={\"/manage/faq\"} component={FAQ} />\n            <Route exact path={\"/login/success\"} component={LoginSuccess} />\n            <Route exact path={\"/login/fail\"} component={LoginFail} />\n            <Route exact path={\"/noAuth\"} component={Customer} />\n            <Route path=\"*\">\n              <div>NotFound</div>\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </Suspense>\n    </>\n  );\n};\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from 'app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport memberReducer from \"../features/member/memberSlice\";\nimport botTemplateReducer from \"../features/bot/botSlice\";\nimport scenarioTemplateReducer from \"../features/scenario/scenarioSlice\";\nimport blockTemplateReducer from \"../features/block/blockSlice\";\nimport commonReducer from \"../features/commonSlice/commonSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    member: memberReducer,\n    botTemplate: botTemplateReducer,\n    scenarioTemplate: scenarioTemplateReducer,\n    blockTemplate: blockTemplateReducer,\n    common: commonReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios, { AxiosRequestConfig } from \"axios\";\n\naxios.interceptors.request.use(\n  async (config: AxiosRequestConfig) => {\n    if (config.headers[\"noauth\"] !== \"use\") {\n      /** 인증 request */\n      config.withCredentials = true;\n    }\n    return Promise.resolve(config);\n  },\n  async (error: any) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response: any) => {\n    if (response.data.status === \"error\") {\n      /** 인증 없을때 리다이렉트 */\n      if (response.data.message === \"noauth\") {\n        window.location.href = \"/login/fail\";\n      }\n      return Promise.reject({\n        response: response,\n        message: response.data.message,\n      });\n    }\n    return response;\n  },\n  (error: any) => {\n    return Promise.reject({\n      response: error.response,\n      message: error.reponse.data.message,\n    });\n  }\n);\n\nexport default axios;\n"],"sourceRoot":""}